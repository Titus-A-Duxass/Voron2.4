#####################################################################
# 	Macros
#####################################################################
[gcode_macro G32]
gcode:
   BED_MESH_CLEAR
   G28
   QUAD_GANTRY_LEVEL
   # G28
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    
    ##	Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
     #--------------------------------------------------------------------
#[gcode_macro BED_MESH_CALIBRATE] deleted because of no BMC
#rename_existing: _BED_MESH_CALIBRATE

[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 260,260
fade_start: 0.6
fade_end: 10.0
probe_count: 9,9 # Values should be odd, so one point is directly at bed center
algorithm: bicubic
#relative_reference_index: 40 # Update when changing probe_count, to ((x points * y points) - 1) / 2. (the center point)

#old bed mesh
#speed: 300
#horizontal_move_z: 10
#mesh_min: 40, 40
#mesh_max: 260,260
#fade_start: 0.6
#fade_end: 10.0
#fade_target: 0
#probe_count: 7,7 # Values should be odd, so one point is directly at bed center
#algorithm: bicubic
#relative_reference_index: 23 # Update when changing probe_count, to ((x points * y points) - 1) / 2. (the center point)

#####################################################################
#   print_start macro
#####################################################################

[gcode_macro PRINT_START]

gcode:

  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  CLEAN_NOZZLE
  #STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    #SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S100                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN =nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    #SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    #G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}


  M109 S240                                   # Heats the nozzle to 150c

  quad_gantry_level               # Levels the buildplate via QGL
  #G28 Z                           # Homes Z again after QGL
  BED_MESH_CALIBRATE
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  #SETUP_KAMP_LINE_PURGE PURGE_LENGTH=20 deleted because of no purge
  VORON_PURGE

  # Gets ready to print by doing a purge line and updating the SB-leds
  #SET_DISPLAY_TEXT MSG="Print Bitch"          # Displays info
  #STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  CLEAN_NOZZLE
  #G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  #G0 Z0.5                                          # Raises Z to 0.5
  #G91                                              # Incremental positioning 
  #G1 X100 E20 F1000                                # Purge line
  #G90                                              # Absolute position

#####################################################################################################################################

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
     #safe anti-stringing move coords
    #{% set th = printer.toolhead %}
    #{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    #{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    #{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G90
    G1 X290 Y290 Z150
    G1 E-7.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
  
    G90                                     ; absolute positioning
    G1 X290 Y290 Z100
    #G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    #G0 X300 Y300
    
    #G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    #G90                            ; absolute positioning
    #G0 X150 Y{max_y} F3600          ; park nozzle at rear
    
   RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    G4 S3                          ; wait 3 seconds
    M18                            ; disable motors

###############################################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    
    #  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32

#########################################################################

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

########################################################################################
########################################################################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X300 Y300 #{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

###############################################################################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

###########################################################################################################################

# Park top rear left
[gcode_macro PARKREAR]
gcode:
   #{% if "xyz" not in printer.toolhead.homed_axes %}
        #G28                           ; home if not already homed
    #{% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-150} Z{printer.toolhead.axis_maximum.z-150} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

##############################################################################################################

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

###############################################################################################################

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

##############################################################################################################

[gcode_macro SHUTDOWN]
gcode:
    #LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
    #OFF                                              ; Shortcut to turn everything off (see above for this macro)
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown

#######################################################################################

[gcode_macro RETRACT]
gcode:
  {% set f = params.F|default(600)|float %}

  {% if 'D' in params %}
    {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
      {action_respond_info("This command cannot be used while printing")}
    {% elif printer.extruder.temperature < 170 %}
      {action_respond_info("Extruder temperature too low")}
    {% else %}
      SAVE_GCODE_STATE NAME=RETRACT_state
      M83
      G1 E-5{params.D} F{f}
      RESTORE_GCODE_STATE NAME=RETRACT_state MOVE=0
    {% endif %}
  {% endif %}

################################################################################################

#[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
#gcode:
    #G91
    # Retract a bit
    #G1 E-2 F2700
    #G1 E-2 Z0.2 F2400
    #G1 X5 Y5 F3000
    # Turn off bed, extruder, and fan
    #M140 S0
    #M104 S0
   # M106 S0
    # Raise nozzle by 10mm
    #G1 Z10 F3000
    #gcode_macro PARKREAR
    #G90
    # Disable steppers
    #M84 X Y E
    # Clear bed mesh
    #BED_MESH_CLEAR
    # Turn off gcode offset
    #SET_GCODE_OFFSET Z=0
    #Restore relative positioning
    #G90
    